#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2025 Edgecast Cloud LLC.

set -o errexit
set -o pipefail

# shellcheck disable=SC2154
if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

# Get list of physical interfaces
phys_interfaces=$(dladm show-phys -p -o LINK 2>/dev/null || true)

# shellcheck disable=SC2181
if [ -z "$phys_interfaces" ]; then
    # If dladm fails, exit silently
    exit 0
fi

# Get all network statistics from kstat at once
stats=$(kstat -p "link:::rbytes64" \
                 "link:::obytes64" \
                 "link:::ipackets64" \
                 "link:::opackets64" \
                 "link:::ierrors" \
                 "link:::oerrors" \
                 "link:::norcvbuf" \
                 "link:::noxmtbuf" \
                 "link:::ifspeed" \
                 "link:::link_state" 2>/dev/null || true)

# Get VNIC count (xargs trims whitespace from wc output)
vnic_count=$(dladm show-vnic -p -o LINK 2>/dev/null | awk 'END {print NR}')

# Process everything with AWK
{
    echo "$phys_interfaces"
    echo "---"
    echo "$stats"
} | awk '
/^---$/ {
    mode = "stats"
    next
}

mode != "stats" && NF > 0 {
    # Build list of valid physical interfaces
    valid_ifaces[$0] = 1
    next
}

mode == "stats" && NF > 0 {
    # Parse kstat output: module:instance:name:stat value
    split($1, parts, ":")
    module = parts[1]
    instance = parts[2]
    interface = parts[3]
    stat = parts[4]
    value = $2

    # Only process interfaces that are physical interfaces
    if (interface in valid_ifaces) {
        # Store stats by interface
        stats[interface, stat] = value

        # Track which interfaces we have seen
        if (!(interface in interfaces_seen)) {
            interfaces_seen[interface] = 1
            interface_order[++interface_count] = interface
        }
    }
}

END {
    # Print all HELP and TYPE statements at the top
    printf "# OPTION ttl 0\n"
    printf "# HELP cn_network_receive_bytes_total Network bytes received on interface\n"
    printf "# TYPE cn_network_receive_bytes_total counter\n"
    printf "# HELP cn_network_transmit_bytes_total Network bytes transmitted on interface\n"
    printf "# TYPE cn_network_transmit_bytes_total counter\n"
    printf "# HELP cn_network_receive_packets_total Network packets received on interface\n"
    printf "# TYPE cn_network_receive_packets_total counter\n"
    printf "# HELP cn_network_transmit_packets_total Network packets transmitted on interface\n"
    printf "# TYPE cn_network_transmit_packets_total counter\n"
    printf "# HELP cn_network_receive_errors_total Network receive errors on interface\n"
    printf "# TYPE cn_network_receive_errors_total counter\n"
    printf "# HELP cn_network_transmit_errors_total Network transmit errors on interface\n"
    printf "# TYPE cn_network_transmit_errors_total counter\n"
    printf "# HELP cn_network_receive_drops_total Network receive buffer drops on interface\n"
    printf "# TYPE cn_network_receive_drops_total counter\n"
    printf "# HELP cn_network_transmit_drops_total Network transmit buffer drops on interface\n"
    printf "# TYPE cn_network_transmit_drops_total counter\n"
    printf "# HELP cn_network_link_speed_bytes Network interface link speed in bytes per second\n"
    printf "# TYPE cn_network_link_speed_bytes gauge\n"
    printf "# HELP cn_network_link_up Network interface link status (1=up, 0=down)\n"
    printf "# TYPE cn_network_link_up gauge\n"

    # Output metrics for each interface
    for (i = 1; i <= interface_count; i++) {
        interface = interface_order[i]

        rbytes = stats[interface, "rbytes64"]
        obytes = stats[interface, "obytes64"]
        ipackets = stats[interface, "ipackets64"]
        opackets = stats[interface, "opackets64"]
        ierrors = stats[interface, "ierrors"]
        oerrors = stats[interface, "oerrors"]
        norcvbuf = stats[interface, "norcvbuf"]
        noxmtbuf = stats[interface, "noxmtbuf"]
        ifspeed = stats[interface, "ifspeed"]
        link_state = stats[interface, "link_state"]

        # Convert ifspeed from bits/sec to bytes/sec
        speed_bytes = ifspeed / 8

        # Output all metrics for this interface
        printf "cn_network_receive_bytes_total{interface=\"%s\"}\t%s\n", interface, rbytes
        printf "cn_network_transmit_bytes_total{interface=\"%s\"}\t%s\n", interface, obytes
        printf "cn_network_receive_packets_total{interface=\"%s\"}\t%s\n", interface, ipackets
        printf "cn_network_transmit_packets_total{interface=\"%s\"}\t%s\n", interface, opackets
        printf "cn_network_receive_errors_total{interface=\"%s\"}\t%s\n", interface, ierrors
        printf "cn_network_transmit_errors_total{interface=\"%s\"}\t%s\n", interface, oerrors
        printf "cn_network_receive_drops_total{interface=\"%s\"}\t%s\n", interface, norcvbuf
        printf "cn_network_transmit_drops_total{interface=\"%s\"}\t%s\n", interface, noxmtbuf
        printf "cn_network_link_speed_bytes{interface=\"%s\"}\t%s\n", interface, speed_bytes
        printf "cn_network_link_up{interface=\"%s\"}\t%s\n", interface, link_state
    }

}
'

# Output VNIC count
printf '# HELP cn_network_vnics Total number of VNICs configured\n'
printf '# TYPE cn_network_vnics gauge\n'
printf 'cn_network_vnics\t%s\n' "$vnic_count"
