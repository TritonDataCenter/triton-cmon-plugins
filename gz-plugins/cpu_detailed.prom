#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2025 Edgecast Cloud LLC.

set -o errexit
set -o pipefail

# shellcheck disable=SC2154
if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

# Get per-CPU time statistics and CPU info
cpu_stats=$(kstat -p  'cpu::sys:cpu_nsec_user' \
                      'cpu::sys:cpu_nsec_kernel' \
                      'cpu::sys:cpu_nsec_idle' \
                      'cpu::sys:cpu_nsec_intr' \
                      'cpu_info:::brand' \
                      'cpu_info:::chip_id' \
                      'cpu_info:::clock_MHz' 2>/dev/null)

# shellcheck disable=SC2181
if [ -z "$cpu_stats" ]; then
    # If kstat fails, exit silently
    exit 0
fi

# Parse and output all metrics using a single awk script
echo "$cpu_stats" | awk '
BEGIN {
    FS = "\t"
    cpu_order_count = 0
}

function extract_cpu_id(key, prefix) {
    sub(prefix, "", key)
    return key
}

function shell_escape(s) {
    gsub(/\\/, "\\\\", s)
    gsub(/"/, "\\\"", s)
    return s
}

function record_cpu_order(cpu_id) {
    # Track CPU order - only add if we havent seen this CPU before
    if (!(cpu_id in cpu_seen)) {
        cpu_seen[cpu_id] = 1
        cpu_order[++cpu_order_count] = cpu_id
    }
}

/^cpu:[0-9]+:sys:cpu_nsec_user\t/ {
    cpu_id = extract_cpu_id($1, "cpu:")
    sub(/:sys:cpu_nsec_user$/, "", cpu_id)
    record_cpu_order(cpu_id)
    user_sec[cpu_id] = sprintf("%.9f", $2 / 1000000000)
}

/^cpu:[0-9]+:sys:cpu_nsec_kernel\t/ {
    cpu_id = extract_cpu_id($1, "cpu:")
    sub(/:sys:cpu_nsec_kernel$/, "", cpu_id)
    record_cpu_order(cpu_id)
    kernel_sec[cpu_id] = sprintf("%.9f", $2 / 1000000000)
}

/^cpu:[0-9]+:sys:cpu_nsec_idle\t/ {
    cpu_id = extract_cpu_id($1, "cpu:")
    sub(/:sys:cpu_nsec_idle$/, "", cpu_id)
    record_cpu_order(cpu_id)
    idle_sec[cpu_id] = sprintf("%.9f", $2 / 1000000000)
}

/^cpu:[0-9]+:sys:cpu_nsec_intr\t/ {
    cpu_id = extract_cpu_id($1, "cpu:")
    sub(/:sys:cpu_nsec_intr$/, "", cpu_id)
    record_cpu_order(cpu_id)
    intr_sec[cpu_id] = sprintf("%.9f", $2 / 1000000000)
}

# CPU info from cpu 0
/^cpu_info:0:/ && /:brand\t/ {
    brand = shell_escape($2)
}

/^cpu_info:0:/ && /:chip_id\t/ {
    chip_id = $2
}

/^cpu_info:0:/ && /:clock_MHz\t/ {
    clock_mhz = $2
}

END {
    # Print TTL option
    printf "# OPTION ttl 0\n"

    # Print metric headers
    printf "# HELP cn_cpu_core_user_seconds_total CPU time spent in user mode per core\n"
    printf "# TYPE cn_cpu_core_user_seconds_total counter\n"
    printf "# HELP cn_cpu_core_system_seconds_total CPU time spent in system mode per core\n"
    printf "# TYPE cn_cpu_core_system_seconds_total counter\n"
    printf "# HELP cn_cpu_core_idle_seconds_total CPU time spent idle per core\n"
    printf "# TYPE cn_cpu_core_idle_seconds_total counter\n"
    printf "# HELP cn_cpu_core_interrupt_seconds_total CPU time spent servicing interrupts per core\n"
    printf "# TYPE cn_cpu_core_interrupt_seconds_total counter\n"

    # Output per-CPU metrics in the order from kstat
    for (i = 1; i <= cpu_order_count; i++) {
        cpu_id = cpu_order[i]

        if (cpu_id in user_sec) {
            printf "cn_cpu_core_user_seconds_total{core=\"%s\"}\t%s\n", cpu_id, user_sec[cpu_id]
        }
        if (cpu_id in kernel_sec) {
            printf "cn_cpu_core_system_seconds_total{core=\"%s\"}\t%s\n", cpu_id, kernel_sec[cpu_id]
        }
        if (cpu_id in idle_sec) {
            printf "cn_cpu_core_idle_seconds_total{core=\"%s\"}\t%s\n", cpu_id, idle_sec[cpu_id]
        }
        if (cpu_id in intr_sec) {
            printf "cn_cpu_core_interrupt_seconds_total{core=\"%s\"}\t%s\n", cpu_id, intr_sec[cpu_id]
        }
    }

    # Output CPU info metric
    if (brand != "" && chip_id != "" && clock_mhz != "") {
        printf "# HELP cn_cpu_info CPU information\n"
        printf "# TYPE cn_cpu_info gauge\n"
        printf "cn_cpu_info{brand=\"%s\",chip_id=\"%s\",clock_mhz=\"%s\"}\t1\n", brand, chip_id, clock_mhz
    }
}'
