#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Copyright 2025 Edgecast Cloud LLC.

set -o errexit
set -o pipefail

# shellcheck disable=SC2154
if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi

# Get all blkdev stats from kstat
stats=$(kstat -p "blkdev:::nread" \
                 "blkdev:::nwritten" \
                 "blkdev:::reads" \
                 "blkdev:::writes" \
                 "blkdev:::rtime" \
                 "blkdev:::wtime" 2>/dev/null || true)

# shellcheck disable=SC2181
if [ -z "$stats" ]; then
    # If kstat fails or returns no devices, exit silently
    exit 0
fi

# Extract unique device names from kstat output
# kstat format is: module:instance:name:stat value
# We want the "name" field (3rd field when split by :)
device_list=$(echo "$stats" | cut -d: -f3 | sort -u)

if [ -z "$device_list" ]; then
    exit 0
fi

first_disk=true

# Set TTL to 0 seconds to ensure accurate rate calculations
printf '# OPTION ttl 0\n'

# Process each device
for device in $device_list; do
    # Get stats for this device by filtering on the device name
    nread=$(echo "$stats" | grep ":${device}:nread" | awk '{print $2}')
    nwritten=$(echo "$stats" | grep ":${device}:nwritten" | awk '{print $2}')
    reads=$(echo "$stats" | grep ":${device}:reads" | awk '{print $2}')
    writes=$(echo "$stats" | grep ":${device}:writes" | awk '{print $2}')
    rtime=$(echo "$stats" | grep ":${device}:rtime" | awk '{print $2}')
    wtime=$(echo "$stats" | grep ":${device}:wtime" | awk '{print $2}')

    # Skip if we didn't find stats for this device
    if [ -z "$nread" ]; then
        continue
    fi

    # Convert nanoseconds to seconds (divide by 1000000000)
    rtime_seconds=$(awk "BEGIN {printf \"%.9f\", $rtime / 1000000000}")
    wtime_seconds=$(awk "BEGIN {printf \"%.9f\", $wtime / 1000000000}")

    # Output metrics with disk label
    # Only output HELP and TYPE once (for first disk)
    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_reads_total Total disk read operations\n'
        printf '# TYPE cn_disk_reads_total counter\n'
    fi
    printf 'cn_disk_reads_total{disk="%s"}\t%d\n' "$device" "$reads"

    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_writes_total Total disk write operations\n'
        printf '# TYPE cn_disk_writes_total counter\n'
    fi
    printf 'cn_disk_writes_total{disk="%s"}\t%d\n' "$device" "$writes"

    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_read_bytes_total Total bytes read from disk\n'
        printf '# TYPE cn_disk_read_bytes_total counter\n'
    fi
    printf 'cn_disk_read_bytes_total{disk="%s"}\t%d\n' "$device" "$nread"

    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_write_bytes_total Total bytes written to disk\n'
        printf '# TYPE cn_disk_write_bytes_total counter\n'
    fi
    printf 'cn_disk_write_bytes_total{disk="%s"}\t%d\n' "$device" "$nwritten"

    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_read_time_seconds_total Total time spent reading from disk in seconds\n'
        printf '# TYPE cn_disk_read_time_seconds_total counter\n'
    fi
    printf 'cn_disk_read_time_seconds_total{disk="%s"}\t%s\n' "$device" "$rtime_seconds"

    if [ "$first_disk" = true ]; then
        printf '# HELP cn_disk_write_time_seconds_total Total time spent writing to disk in seconds\n'
        printf '# TYPE cn_disk_write_time_seconds_total counter\n'
    fi
    printf 'cn_disk_write_time_seconds_total{disk="%s"}\t%s\n' "$device" "$wtime_seconds"

    first_disk=false
done
